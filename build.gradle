buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://maven.google.com'
        }
        maven {
            url 'https://dl.google.com/dl/android/maven2/'
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        //noinspection GradleDependency
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        //noinspection GradleDependency
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.0.3'
    }
}

apply plugin: 'com.android.library'
apply from: 'gradle/eclipse.gradle'
apply from: 'gradle/version.gradle'

allprojects {
    repositories {
        jcenter()
        maven {
            url 'https://maven.google.com'
        }
        maven {
            url 'https://dl.google.com/dl/android/maven2/'
        }
    }
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        // Unfortunately 'com.android.support:appcompat-v7:26.0.0'
        // requires minSdkVersion 14, forcing a bump verson minSdkVersion 7
        // But since only 0.8% of Android devices have < SDK 14 as of Une 2017, this will become
        // the new min version for this library in order to target Android O
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName version
        consumerProguardFiles 'proguard-rules.pro'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
        }
    }
}

configurations {
    doclava
}



dependencies {
    implementation fileTree ( dir: 'libs', include: ['*.jar'] )
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:support-annotations:28.0.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:4.1'
    testImplementation 'com.google.android:android-test:4.1.1.4'
    testImplementation 'com.squareup:fest-android:1.0.8@aar'
    testImplementation 'org.mockito:mockito-core:2.23.4'

    androidTestUtil 'com.android.support.test:orchestrator:1.0.2'

    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'org.apache.commons:commons-math3:3.6.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    
    doclava 'com.google.doclava:doclava:1.0.6'
}

apply plugin: 'idea'

idea {
    module {
        testOutputDir = file('build/test-classes/debug')
    }
}

task renameAarForRelease(type: Copy, dependsOn: build) {
    description = "Rename the aar for easy release publishing"

    from "$buildDir/outputs/aar/" //${project.name}-release.aar
    into "$buildDir/outputs/aar/" //${project.name}-${project.version}.aar"
    include "${project.name}-release.aar"
    rename { String fileName ->
        fileName = "${project.name}-${project.version}.aar"
    }
}

task distribution(dependsOn: [bundleEclipse, build, clean, renameAarForRelease]) << {
    println "Building with version=$version"
}

task release(dependsOn: 'distribution') << {
    println('Doing release build')
}

android.libraryVariants.all { variant ->

    task("generate${variant.name}Javadoc", type: Javadoc) {
        title = "Android Beacon Library $version API"
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar =
                "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        //Refer to https://stackoverflow.com/a/50833438/4068957
        doFirst { classpath = files(variant.javaCompile.classpath.files, ext.androidJar)}
        options.linksOffline "http://d.android.com/reference/", "${android.sdkDirectory}/docs/reference"
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

}

task generateJavadoc(type: Javadoc, dependsOn: project.configurations.doclava) {
    failOnError = true
    title = null
    source = android.sourceSets.main.java.srcDirs
    options.doclet = "com.google.doclava.Doclava"
    options.docletpath = configurations.doclava.files.asType(List)
    classpath +=
            project.files(android.getBootClasspath().join(File.pathSeparator)) + configurations.compile

    destinationDir = file("../javadocs/")
}

build.mustRunAfter clean

apply from: 'gradle/credentials.gradle'
apply from: 'gradle/compile.gradle'
apply from: 'gradle/publishing.gradle'
apply from: 'gradle/bintray.gradle'
apply from: 'gradle/artifactory.gradle'

artifactoryPublish {
    // Skip deploying to artifactory if building a pull request
    onlyIf { !isSnapPullRequest }
}
